# -*- encoding : utf-8 -*-
require 'cape'
require 'capistrano_colors'

#set :default_environment, 'staging'

#set :rake, "#{rake} --trace"
set :rvm_ruby_string, 'ruby-2.0.0-p247@abf-worker'
require 'rvm/capistrano'
require 'bundler/capistrano'
#require 'airbrake/capistrano'

require 'capistrano/ext/multistage'
set :stages, %w(production) # auto readed
set :default_stage, "production"

# main details
ssh_options[:forward_agent] = true
default_run_options[:pty] = true

set :env, ENV['ENV'] || 'production'

set :application, "abf-worker"
set(:deploy_to) { "/home/rosa/#{application}" }
set :user, "rosa"
set :use_sudo, false
set :keep_releases, 3

set :scm, :git
set :repository,  "git@github.com:uname/repository.git"
set :deploy_via,  :remote_cache

set :workers_count, 2


set :rvm_install_ruby_threads, 1
#before 'deploy:setup', 'rvm:install_rvm'
#before 'deploy:setup', 'rvm:install_ruby'

# Resque
after "deploy:update",        "deploy:init_keys"
after "deploy:update",        "deploy:symlink_all"
after "deploy:update",        "airbrake:deploy"
after "deploy:stop",          "resque:stop_workers"
after "resque:stop_workers",  "rake_tasks:abf_worker:clean_up"
after "deploy:restart",       "deploy:cleanup"

after   "deploy:rpm",         "god:rpm"
before  "deploy:stop",        "god:terminate_if_running"

namespace :god do
  def god_is_running
    !capture("#{god_command} status >/dev/null 2>/dev/null || echo 'not running'").start_with?('not running')
  end

  def god_command
    "cd #{fetch :current_path} && rvm #{fetch :rvm_ruby_string} exec bundle exec god"
  end

  desc "Stop god"
  task :terminate_if_running, :roles => [:rpm, :zurich, :msk] do
    if god_is_running
      run "#{god_command} terminate"
    end
  end

  desc "Start RPM god"
  task :rpm, :roles => [:rpm, :zurich, :msk] do
    env = worker_params({
      :INTERVAL => 5,
      :COUNT    => 8,
      :QUEUE    => 'rpm_worker_default,rpm_worker',
      :ABF_ROOT => fetch(:current_path),
      :RVM_RUBY_STRING => fetch(:rvm_ruby_string)
    })
    config_file = "#{fetch :current_path}/config/rpm.god"
    run "#{god_command} -c #{config_file}", :env => env
  end
end

namespace :deploy do

  task :init_keys do
    run "cd #{fetch :current_path} && chmod 600 keys/vagrant"
  end

  task :symlink_all do
    run "mkdir -p #{fetch :shared_path}/config"

    # Setup DB, application, newrelic
    %w(resque application newrelic vm).each do |config|
      run "cp -n #{fetch :release_path}/config/#{config}.yml.sample #{fetch :shared_path}/config/#{config}.yml"
      run "ln -nfs #{fetch :shared_path}/config/#{config}.yml #{fetch :release_path}/config/#{config}.yml"
    end

  end

  task :iso, :roles => :iso do
    run_worker_with_params({
      :INTERVAL => 60,
      :COUNT    => 4,
      :QUEUE    => 'iso_worker'
    })
  end

  task :publish, :roles => :publish do 
    queue = 'publish_worker'
    run_worker_with_params({
      :INTERVAL => 5,
      :COUNT    => 4,
      :QUEUE    => "#{queue}_default,#{queue}"
    })
  end

  task :rpm, :roles => [:rpm, :zurich, :msk] do
    # queue = 'rpm_worker'
    # run_worker_with_params({
    #   :INTERVAL => 5,
    #   :COUNT    => 8,
    #   :QUEUE    => "#{queue}_default,#{queue}"
    # })
  end

end

namespace :resque do
  task :stop_workers do
    ps = 'ps aux | grep resque | grep -v grep'
    run "#{ps} && kill -QUIT `#{ps} | awk '{ print $2 }'` || echo 'Workers already stopped!'"
    # run "#{ps} && kill -9 `#{ps} | awk '{ print $2 }'` || echo 'Workers already stopped!'"
    # run "cd #{fetch :current_path} && #{current_env} bundle exec rake resque:stop_workers"
  end
end

namespace :rake_tasks do
  Cape do
    mirror_rake_tasks "abf_worker:clean_up" do |recipes|
      recipes.env['ENV'] = fetch(:env) if fetch(:env, false)
    end
    mirror_rake_tasks "abf_worker:init" do |recipes|
      recipes.env['ENV'] = fetch(:env) if fetch(:env, false)
    end
  end
end

def run_worker_with_params(params)
  env = worker_params(params).map{ |k, v| "#{k}=#{v}" }.join(' ')
  run "cd #{fetch :current_path} && #{env} bundle exec rake resque:workers"
end

def worker_params(params)
  {
    :RESQUE_TERM_TIMEOUT  => 600,
    :TERM_CHILD           => 1,
    :ENV                  => (fetch(:env, false) ? fetch(:env) : ''),
    :BACKGROUND           => 'yes'
  }.merge(params)
end